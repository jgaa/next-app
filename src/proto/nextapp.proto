syntax = "proto3";

package nextapp.pb;

enum Error {
    OK = 0;
    MISSING_TENANT_NAME = 1;
    MISSING_USER_NAME = 2;
    MISSING_USER_EMAIL = 3;
    ALREADY_EXIST = 4;
    INVALID_PARENT = 5;
    DATABASE_UPDATE_FAILED = 6;
    DATABASE_REQUEST_FAILED = 7;
    NOT_FOUND = 8;
    DIFFEREENT_PARENT = 9;
    NO_CHANGES = 10;
    CONSTRAINT_FAILED = 11;
    GENERIC_ERROR = 12;
}

message KeyValue {
    string key = 1;
    optional string value = 2;
}

message Empty {}

message ServerInfo {
    repeated KeyValue properties = 1;
}

message Tenant {
    enum Kind {
        Super = 0;
        Regular = 1;
        Guest = 2;
    }

    string uuid = 1;
    string name = 2;
    optional Kind kind = 3;
    bool active = 4;
    string descr = 5;
    map<string, string> properties = 6;
}

message User {
    enum Kind {
        Super = 0;
        Regular = 1;
    }

    string uuid = 1;
    string name = 2;
    string email = 3;
    string tenant = 4; // uuid
    optional Kind kind = 5;
    optional bool active = 6;
    string descr = 7;
    map<string, string> properties = 8;
}

message Node {
    enum Kind {
        FOLDER = 0;
        ORGANIZATION = 1;
        PERSON = 2;
        PROJECT = 3;
        TASK = 4;
    }

    string uuid = 1;
    string parent = 2;
    string user = 3;
    optional bool active = 4;
    string name = 5;
    Kind kind = 6;
    string descr = 7;
    int64 version = 8;
}

message UpdateRequest {
    enum Kind {
        REFRESH = 0;
    }

    Kind kind = 1;
}

message NodeTreeItem {
    Node node = 1;
    repeated NodeTreeItem children = 2;
}

message NodeTree {
    NodeTreeItem root = 1; // The root-node has no valid Node object, but just children
}

message NodeUpdate {
    NodeTree tree = 3;
}


enum ActionStatus {
    ACTIVE  = 0;
    DONE    = 1;
    ONHOLD  = 2;
}

enum ActionDueType {
    DATETIME    = 0;
    DATE        = 1;
    WEEK        = 2;
    MONTH       = 3;
    QUATER      = 4;
    YEAR        = 5;
}

enum ActionDifficulty {
    TRIVIAL  = 0;
    EASY     = 1;
    NORMAL   = 2;
    HARD     = 3;
    VERYHARD = 4;
    INSPIRED = 5;
}

enum ActionPriority {
    PRI_CRITICAL        = 0;
    PRI_VERY_IMPORNANT  = 1;
    PRI_HIGHER          = 2;
    PRI_HIGH            = 3;
    PRI_NORMAL          = 4;
    PRI_MEDIUM          = 5;
    PRI_LOW             = 6;
    PRI_INSIGNIFICANT   = 7;
}

enum ActionKind {
    AC_UNSET            = 0;
    AC_OVERDUE          = 1;
    AC_TODAY            = 2;
    AC_UPCOMING         = 3;
    AC_UNSCHEDULED      = 4;
    AC_DONE             = 5;
}

// For communicating a list of actions
message ActionInfo {
    string id           = 1;
    string node         = 2; // uuid
    ActionPriority priority = 3;
    ActionStatus status = 4;
    string name         = 5;
    Date createdDate    = 7;
    ActionDueType dueType = 8;
    uint64 dueByTime    = 9; // time_t
    bool completed      = 10;
    uint64 completedTime = 11; // time_t
    ActionKind kind     = 12;
    int32 version       = 13;
}

message Actions {
    repeated ActionInfo actions = 1;
    optional ActionStatus activeFilter = 2; // informative
}

// The complete information about an action
message Action {
    enum RepeatKind {
        NEVER = 0;
        COMPLETED = 1;
        DONE = 2;
    }

    enum RepeatUnit {
        DAYS = 0;
        WEEKS = 1;
        MONTHS = 2;
        YEARS = 3;
    }

    string id = 1;
    string node = 2; // uuid
    ActionPriority priority = 3;
    ActionStatus status = 4;
    string name = 5;
    Date createdDate = 7;
    ActionDueType dueType = 8;
    uint64 dueByTime = 9; // time_t
    bool completed      = 10;
    uint64 completedTime = 11; // time_t
    string descr = 6;
    uint64 timeEstimate = 12; // minutes
    ActionDifficulty difficulty = 13;
    RepeatKind repeatKind = 14;
    RepeatUnit repeatUnits = 15;
    int32 repeatAfter = 16; // Depends on repeatUnits
    repeated string locations = 17; // Just the uuid's of locations
    ActionKind kind = 18;
    int32 version   = 19;
}

message DayColor {
    string id = 1;
    bool systemColor = 2; // Should not be deleted or modified
    int32 score = 3;
    string color = 4;
    string name = 5;
}

message DayColorDefinitions {
    repeated DayColor dayColors = 1;
}

// Do it this way to avoid all kinds of problems with time zones.
message Date {
    int32 year = 1;
    int32 month = 2; // 0 - 11, starting with January
    int32 mday = 3; // 1 - 31
}

message Day {
    Date date = 1;
    string user = 2; // uuid
    string color = 3; // uuid
    bool hasNotes = 4;
    bool hasReport = 5;
}

message ColorAtDay {
    Date date = 1;
    string user = 2; // uuid
    string color = 3; // uui
}

message CompleteDay {
    Day day = 1;
    optional string notes = 2;
    optional string report = 3;
}

message MonthReq {
    int32 year = 1;
    int32 month = 2; // 0 - 11, starting with January
}

message Month {
    int32 year = 1;
    int32 month = 2; // 0 - 11, starting with January
    repeated Day days = 3;
}

message SetColorReq {
    Date date = 1;
    string color = 2; // empty string: unset the color
}

message Ping {}

message Timestamp {
    uint64 seconds = 1; // C++ time_t UNIX timestamp.
}

message Update {
    Timestamp when = 1;

    enum Operation {
        ADDED = 0;
        DELETED = 1;    // For deleted things, only the id needs to be set
        UPDATED = 2;
        MOVED = 4;      // The thing moved
    }

    Operation op = 2;

    oneof what {
        Ping ping = 10;
        CompleteDay day = 11;
        ColorAtDay DayColor = 12;
        Tenant tenant = 13;
        User user = 14;
        Node node = 15;
        Action action = 16;
    }
}

message UpdatesReq{}

message CreateTenantReq {
    Tenant tenant = 1; // Template
    repeated User users = 2; // User templates. Emails must be unique
}

message CreateNodeReq {
    Node node = 1;
}

message GetNodesReq {
}

message DeleteNodeReq {
    string uuid = 1;
}

message MoveNodeReq {
    string uuid = 1;
    string parentUuid = 2;
}

message GetActionsReq {
    optional bool active = 1;
    string node = 2;
}

message GetActionReq {
    string uuid = 2;
}

message DeleteActionReq {
    string actionId = 1;
}

message ActionDoneReq {
    string uuid = 1;
    bool done = 2;
}

message Status {
    Error error = 1;
    string message = 2;
    optional string uuid = 3;

    // Set for some objects when they are created
    oneof what {
        Tenant tenant = 10;
        User user = 11;
        Node node = 12;
        Actions actions = 13;
        Action action = 14;
        string deletedActionId = 15;
    }
}

service Nextapp {
    rpc GetServerInfo(Empty) returns (ServerInfo) {}
    rpc GetNodes(GetNodesReq) returns (NodeTree) {}
    //rpc NodeChanged(NodeUpdate) returns (Status) {}
    rpc GetDayColorDefinitions(Empty) returns (DayColorDefinitions) {}
    rpc GetDay(Date) returns (CompleteDay) {}
    rpc GetMonth(MonthReq) returns (Month) {}
    rpc SetColorOnDay(SetColorReq) returns (Status) {}
    rpc SetDay(CompleteDay) returns (Status) {}
    rpc SubscribeToUpdates(UpdatesReq) returns (stream Update) {}
    rpc CreateTenant(CreateTenantReq) returns (Status) {}

    // If called by a super-user, user.uuid can point to any tenant. If unset, the logged-in tenant is used.
    rpc CreateUser(User) returns (Status) {}

    rpc CreateNode(CreateNodeReq) returns (Status) {}
    rpc UpdateNode(Node) returns (Status) {}
    rpc DeleteNode(DeleteNodeReq) returns (Status) {}
    rpc MoveNode(MoveNodeReq) returns (Status) {}
    rpc GetActions(GetActionsReq) returns (Status) {}
    rpc GetAction(GetActionReq) returns (Status) {}
    rpc CreateAction(Action) returns (Status) {}
    rpc UpdateAction(Action) returns (Status) {}
    rpc DeleteAction(DeleteActionReq) returns (Status) {}
    rpc MarkActionAsDone(ActionDoneReq) returns (Status) {}

}

