syntax = "proto3";

package nextapp.pb;

import "common.proto";


enum Error {
    OK = 0;
    MISSING_TENANT_NAME = 1;
    MISSING_USER_NAME = 2;
    MISSING_USER_EMAIL = 3;
    ALREADY_EXIST = 4;
    INVALID_PARENT = 5;
    DATABASE_UPDATE_FAILED = 6;
    DATABASE_REQUEST_FAILED = 7;
    NOT_FOUND = 8;
    DIFFEREENT_PARENT = 9;
    NO_CHANGES = 10;
    CONSTRAINT_FAILED = 11;
    GENERIC_ERROR = 12;
    INVALID_ACTION = 13;
    INVALID_REQUEST = 14;
    PAGE_SIZE_TOO_SMALL = 15;
    AUTH_MISSING_SESSION_ID = 16;
    NO_RELEVANT_DATA = 17;
    MISSING_CSR = 18;
    INVALID_CSR = 19;
    PERMISSION_DENIED = 20;
    TENANT_SUSPENDED = 21;
    USER_SUSPENDED = 22;
    MISSING_USER_ID = 23;
    AUTH_FAILED = 24;
    CONFLICT = 25;
    MISSING_AUTH = 26;
    DEVICE_DISABLED = 27;
    CLIENT_GRPC_ERROR = 28; // Used internally in the client to notify about comm error
    REPLAY_DETECTED = 29; // The request-id is already seen. This is a replay
    INVALID_ARGUMENT = 30;
    TEMPORATY_FAILURE = 31;
}

message Page {
    uint32 pageSize = 2;

    oneof key {
        string prevKey = 3;

        // We may (almost certainly) get the same row again, but that is better than missing rows with the same time_t
        uint64 prevTime = 4; // time_t

        uint64 offset = 5;
    }
}

//message KeyValue {
//    string key = 1;
//    optional string value = 2;
//}

message Empty {}

message KeyValue {
    map<string, string> kv = 8;
}

message ServerInfo {
    KeyValue properties = 1;
}

message User {
    enum Kind {
        SUPER = 0;
        REGULAR = 1;
    }

    string uuid = 1;
    string name = 2;
    string email = 3;
    string tenant = 4; // uuid
    optional Kind kind = 5;
    optional bool active = 6;
    string descr = 7;
    optional KeyValue properties = 8;
    bool system_user = 9;
}

message Tenant {
    enum Kind {
        SUPER = 0;
        REGULAR = 1;
        GUEST = 2;
    }

    enum State {
        PENDING_ACTIVATION = 0; // Will be activated the first time a user connects
        ACTIVE = 1;
        SUSPENDED = 2;
    }

    string uuid = 1;
    string name = 2;
    optional Kind kind = 3;
    State state = 4;
    string descr = 5;
    optional KeyValue properties = 8;
    repeated User users = 7;
    bool system_tenant = 9;
}

message WorkHours {
    uint32 start = 1; // minutes since midnight
    uint32 end = 2; // minutes since midnight
}

message UserGlobalSettings {
    WorkHours defaultWorkHours = 1;
    string timeZone = 2;
    string region = 3;
    string language = 4;
    bool firstDayOfWeekIsMonday = 5;
    bool autoStartNextWorkSession = 6;
    bool autoStartNewWorkSession = 7;
    int64 version = 8;
}

message Node {
    enum Kind {
        FOLDER = 0;
        ORGANIZATION = 1;
        PERSON = 2;
        PROJECT = 3;
        TASK = 4;
    }

    string uuid = 1;
    string parent = 2;
    string user = 3;
    optional bool active = 4;
    string name = 5;
    Kind kind = 6;
    string descr = 7;
    int64 version = 8; // Set by the server, handled by version trigger in the db
    bool deleted = 9;
    int64 updated = 10; // time_t as ms
    bool excludeFromWeeklyReview = 11;
    string category = 12;
}

message WorkEvent {
    enum Kind {
        START = 0; // Start a new session
        STOP = 1; // Stop/End the current session
        PAUSE = 2; // Pause the current session
        RESUME = 3; // Resume a paused session
        TOUCH = 4; // Update the touched time. Moves it to the top pf the list

        // Correct a session. Any or all of the optional fields can be used
        // Any correction for a value set that value absolutely at the time of the correction.
        // If there are conflicting corrections, the last one wins.
        // If start or end time is corrected, all events, except corrections, before start or after end are ignored
        CORRECTION = 5;
    }

    Kind kind = 1;
    uint64 time = 2; // time_t

    // For corrections
    optional uint64 start = 3; // time_t
    optional uint64 end = 4; // time_t
    optional uint32 duration = 5; // minutes
    optional uint32 paused = 6; // minutes

    // These are used to change the properties of a session.
    optional string name = 7;
    optional string notes = 8;
}
message WorkSession {
    enum State {
        ACTIVE = 0;
        PAUSED = 1;
        DONE = 2;
        DELETED = 3;
    }

    string id = 1; // uuid
    string action = 2;
    string user = 3;
    uint64 start = 4; // time_t
    optional uint64 end = 5; // time_t, also flags if a session is active
    uint32 duration = 6; // minutes
    uint32 paused = 7; // minutes
    State state = 8;
    int32 version = 9;
    uint64 touched = 10; // time_t (updated manually by the app)
    repeated WorkEvent events = 11;
    string name = 12;
    string notes = 13;
    uint64 updated = 14; // time_t ms (updated automatically oin changes)
}

message WorkSessions {
    repeated WorkSession sessions = 1;   
}

message SavedWorkEvents {
    repeated WorkEvent events = 1;
}

enum WorkSummaryKind {
    WSK_DAY = 0;
    WSK_WEEK = 1;
    WSK_MONTH = 2;
    WSK_QUARTER = 3;
    WSK_YEAR = 4;
}

message WorkSummary {
    WorkSummaryKind kind = 1;
    uint64 start = 2; // time_t
    uint64 end = 3; // time_t
    uint64 duration = 4; // minutes
    uint64 paused = 5; // minutes
}

message WorkSummaryRequest {
    uint64 start = 1; // time_t
    WorkSummaryKind kind = 2;
}

message DetailedWorkSummaryItem {
    string node = 1;
    string action = 2;
    uint32 duration = 3; // minutes
    Date date = 4;
}

message DetailedWorkSummary {
    repeated DetailedWorkSummaryItem items = 1;
}

message DetailedWorkSummaryRequest {
    uint64 start = 1; // time_t
    WorkSummaryKind kind = 2;
    //string node = 3;
}

message UpdateRequest {
    enum Kind {
        REFRESH = 0;
    }

    Kind kind = 1;
}

message NodeTreeItem {
    Node node = 1;
    repeated NodeTreeItem children = 2;
}

message NodeTree {
    NodeTreeItem root = 1; // The root-node has no valid Node object, but just children
}

message NodeUpdate {
    NodeTree tree = 3;
}

message Nodes {
    repeated Node nodes = 1; // Nodes in random order
}

enum ActionStatus {
    ACTIVE  = 0;
    DONE    = 1;
    ONHOLD  = 2;
    DELETED = 3;
}

enum ActionDueKind {
    DATETIME    = 0;
    DATE        = 1;
    WEEK        = 2;
    MONTH       = 3;
    QUARTER     = 4;
    YEAR        = 5;
    UNSET       = 6;
    SPAN_HOURS  = 7;
    SPAN_DAYS   = 8;
}

enum ActionDifficulty {
    TRIVIAL  = 0;
    EASY     = 1;
    NORMAL   = 2;
    HARD     = 3;
    VERYHARD = 4;
    INSPIRED = 5;
}

enum ActionPriority {
    PRI_CRITICAL        = 0;
    PRI_VERY_IMPORNANT  = 1;
    PRI_HIGHER          = 2;
    PRI_HIGH            = 3;
    PRI_NORMAL          = 4;
    PRI_MEDIUM          = 5;
    PRI_LOW             = 6;
    PRI_INSIGNIFICANT   = 7;
}

enum ActionKind {
    AC_UNSET            = 0;
    AC_OVERDUE          = 1;
    AC_TODAY            = 2; // The action is due today
    AC_ACTIVE           = 3; // The action is active and can be worked on
    AC_UPCOMING         = 4; // The action is not active yet
    AC_UNSCHEDULED      = 5; // The action is not scheduled
    AC_DONE             = 6;
    AC_ON_HOLD          = 7;
}

// Due time for an action
// The window between start and due is when the action should be done.

// If start is null and due is set, the action is due at the specified time.
// If start is set, due must a so be set, and the task shpuld be done within the window.
// ActionDueKind dictates how the due time is constructed
message Due {
    optional uint64 start    = 1; // time_t
    optional uint64 due      = 2; // time_t
    ActionDueKind kind       = 8;
    string timezone          = 3; // Time zone for the user when Due was set
}

// For communicating a list of actions
message ActionInfo {
    string id           = 1;
    string node         = 2; // uuid
    optional string origin = 10; // uuid
    ActionPriority priority = 3;
    ActionStatus status = 4;
    bool favorite       = 8;
    string name         = 5;
    Date createdDate    = 7;
    Due due             = 9;
    uint64 completedTime = 11; // time_t
    ActionKind kind     = 12;
    int32 version       = 13;
    string category     = 14;
}

message Actions {
    repeated ActionInfo actions = 1;
    optional ActionStatus activeFilter = 2; // informative
}

message CompleteActions {
    repeated Action actions = 1;
}

// The complete information about an action
message Action {
    enum RepeatKind {
        NEVER = 0;
        COMPLETED = 1;
        START_TIME = 2;
        DUE_TIME = 3;
    }

    enum RepeatUnit {
        DAYS = 0;
        WEEKS = 1;
        MONTHS = 2;
        QUARTERS = 3;
        YEARS = 4;
    }

    enum RepeatWhen {
        AT_DATE = 0;
        AT_DAYSPEC = 1;
    }

    // Represent bits in repeatAfter if repeatWhen is AT_DAYSPEC
    enum RepeatSpecs {
        SUNDAY = 0;
        MONDAY = 1;
        TUESDAY = 2;
        WEDNESDAY = 3;
        THURSDAY = 4;
        FRIDAY = 5;
        SATURDAY = 6;
        FIRST_DAY_IN_WEEK = 7;
        LAST_DAY_OF_WEEK = 8;
        FIRST_DAY_IN_MONTH = 9;
        LAST_DAY_IN_MONTH = 10;
        FIRST_DAY_IN_QUARTER = 11;
        LAST_DAY_IN_QUARTER = 12;
        FIRST_DAY_IN_YEAR = 13;
        LAST_DAY_IN_YEAR = 14;
    }

    string id = 1;
    string node = 2; // uuid
    optional string origin = 10; // uuid
    ActionPriority priority = 3;
    ActionStatus status = 4;
    bool favorite = 8;
    string name = 5;
    Date createdDate = 7;
    Due due = 9;
    uint64 completedTime = 11; // time_t
    string descr = 6;
    uint64 timeEstimate = 12; // minutes
    ActionDifficulty difficulty = 13;
    RepeatKind repeatKind = 14;
    RepeatUnit repeatUnits = 15;
    RepeatWhen repeatWhen = 16;
    int32 repeatAfter = 17; // Depends on repeatUnits
    repeated string locations = 18; // Just the uuid's of locations
    ActionKind kind = 19;
    int32 version   = 20;
    string category = 21;
    int64 updated = 23; // time_t as ms
}

// Allow updating multiple actions at once, without altering the other fields.
message UpdateActionsReq {
    repeated common.Uuid actions = 1;

    optional Due due = 2; // Sets the due on the actions
    optional ActionPriority priority = 3; // Sets the priority on the actions
    optional ActionStatus status = 4; // Sets the status on the actions
    optional bool favorite = 5; // Sets the favorite flag on the actions
    optional common.Uuid category = 6; // Sets the category on the actions
    optional ActionDifficulty difficulty = 7; // Sets the difficulty on the actions
    optional uint64 timeEstimate = 8; // Sets the time estimate on the actions
}


message DayColor {
    string id = 1;
    bool systemColor = 2; // Should not be deleted or modified
    int32 score = 3;
    string color = 4;
    string name = 5;
    uint64 updated = 6; // time_t
}

message DayColorDefinitions {
    repeated DayColor dayColors = 1;
}

// Do it this way to avoid all kinds of problems with time zones.
message Date {
    int32 year = 1;
    int32 month = 2; // 0 - 11, starting with January
    int32 mday = 3; // 1 - 31
}

message Day {
    Date date = 1;
    //string user = 2; // uuid
    string color = 3; // uuid
    bool hasNotes = 4;
    bool hasReport = 5;
    uint64 updated = 6; // time_t
    bool deleted = 7;
}

//message ColorAtDay {
//    Date date = 1;
//    string color = 3; // uui
//}

message CompleteDay {
    Day day = 1;
    optional string notes = 2;
    optional string report = 3;
}

message ListOfDays {
    repeated CompleteDay days = 1;
}

message MonthReq {
    int32 year = 1;
    int32 month = 2; // 0 - 11, starting with January
}

message Month {
    int32 year = 1;
    int32 month = 2; // 0 - 11, starting with January
    repeated Day days = 3;
}

message SetColorReq {
    Date date = 1;
    string color = 2; // empty string: unset the color
}

message PingReq {}

message PingResp {}

message Timestamp {
    uint64 seconds = 1; // C++ time_t UNIX timestamp.
}

//message Uuid {
//    string uuid = 1;
//}

message StringList {
    repeated string list = 1;
}

message TimeBlock {
    enum Kind {
        RESERVATION = 0;
        ACTIONS = 1;
        DELETED = 2;
    }

    string id = 1;
    string user = 2;
    TimeSpan timeSpan = 3;
    string name = 4;
    Kind kind = 5;
    string category = 6;

    // Action id's are cached in the timeblock. It is also stored in the table `time_block_actions`
    // These must be in sync (updated in one transaction)
    StringList actions = 7;
    int32 version = 8;
    uint64 updated = 9; // time_t as ms
}

message TimeBlocks {
    repeated TimeBlock blocks = 1;
}

message DeleteTimeblockReq {
    string id = 1;
}

message CalendarEvent {
    string id = 1;
    string user = 2;
    TimeSpan timeSpan = 3;
    oneof what {
        ActionInfo action = 10;
        TimeBlock timeBlock = 11;
    }
}

message CalendarEvents {
    repeated CalendarEvent events = 1;
}

message ActionCategory {
    string id = 1;
    string name = 2;
    string descr = 3;
    string color = 4;
    int32 version = 5;
    string icon = 6;
    bool deleted = 7;
    int64 updated = 8; // time_t as ms
}

message ActionCategories {
    repeated ActionCategory categories = 1;
}

message DeleteActionCategoryReq {
    string id = 1;
}

message CreateDeviceReq {
    common.Device device = 1;

    oneof auth {
        string userId = 10;
        common.OtpAuth otpAuth = 11;
    }
}

message CreateDeviceResp {
    string deviceId = 1;
    string cert = 2;
    string caCert = 3;
}

message Device {
    string id = 1;
    string user = 2;
    string name = 3;
    Timestamp created = 4;
    string hostName = 5;
    string os = 6;
    string osVersion = 7;
    string appVersion = 8;
    string productType = 9;
    string productVersion = 10;
    string arch = 11;
    string prettyName = 12;
    Timestamp lastSeen = 13;
    bool enabled = 14;
    uint64 numSessions = 15;
}

message Devices {
    repeated Device devices = 1;
}

message DeviceUpdateReq {
    string id = 1;
    optional string name = 2;
    optional bool enabled = 3;
}

message Notification {
    enum SenderType {
        ADMIN = 0;
        SYSTEM = 1;
        TENANT = 2;
        USER = 3;
    }

    enum Kind {
        INFO = 0;
        WARNING = 1;
        ERROR = 2;
        UPGRADE = 3;
        OUTAGE = 4;
        PROMOTION = 5;
        DELETED = 6;
    }

    uint64 id = 1;
    common.Time createdTime = 2;
    optional common.Time validTo = 3;
    string subject = 4;
    string message = 5;
    SenderType senderType = 6;
    string senderId = 7;
    optional common.Uuid toUser = 8;
    optional common.Uuid toTenant = 9;
    common.Uuid uuid = 10;
    Kind kind = 11;
    string data = 12; // Depends on context
    uint64 updated = 13; // time_t as ms;
}

message Notifications {
    repeated Notification notifications = 1;
}

message DeleteNotificationReq {
    oneof what {
        uint32 id = 1;
        common.Uuid uuid = 2;
    }
}

// Versions of various smaller data sets the user must check on startup.
message DataVersionsInfo {
    uint64 actionCategoryVersion = 1;
    uint64 lastKnownNotification = 2;
}

message Update {
    Timestamp when = 1;

    enum Operation {
        ADDED = 0;
        DELETED = 1;    // For deleted things, only the id needs to be set
        UPDATED = 2;
        MOVED = 4;      // The thing moved
    }

    Operation op = 2;
    uint32 messageId = 3; // An incremental id for the message. Resets to 1 when teh server starts.

    oneof what {
        PingResp ping = 10;
        CompleteDay day = 11;
        Tenant tenant = 13;
        User user = 14;
        Node node = 15;
        Action action = 16;
        WorkSession work = 17;
        UserGlobalSettings userGlobalSettings = 18;
        CalendarEvents calendarEvents = 19;
        ActionCategory actionCategory = 20;
        Device device = 21;
        Notifications notifications = 22;
    }
}

message UpdatesReq{}

message CreateTenantReq {
    Tenant tenant = 1; // Template
    repeated User users = 2; // User templates. Emails must be unique
}

message CreateNodeReq {
    Node node = 1;
}

message GetNodesReq {
}

message DeleteNodeReq {
    string uuid = 1;
}

message MoveNodeReq {
    string uuid = 1;
    string parentUuid = 2;
}

message MoveActionReq {
    string actionId = 1;
    string nodeId = 2;
}

message PageSpan {
    uint32 pageSize = 1;
    uint32 offset = 2;
}

message GetActionsFlags {
    bool active = 1;
    bool upcoming = 5;
    bool unscheduled = 6;
    bool done = 7;
}

message GetActionsReq {
    PageSpan page = 2;
    GetActionsFlags flags = 3;
    optional TimeSpan startSpan = 4;
    optional TimeSpan dueSpan = 5;

    oneof filter {
        string nodeId = 11;
        string nodeIdAndChildren = 12;
        bool favorites = 16; // Flags that we only want favorite actions
        bool onTodaysCalendar = 17;
    }
}

message GetActionReq {
    string uuid = 2;
}

message DeleteActionReq {
    string actionId = 1;
}

message ActionDoneReq {
    string uuid = 1;
    bool done = 2;
}

message ActionFavoriteReq {
    string uuid = 1;
    bool favorite = 2;
}

message FavoriteAction {
    string actionId = 1;
    string actionName = 2;
    string nodeId = 3;
    string nodeName = 4;
    int32 actionVersion = 5;
}

message FavoriteActions {
    repeated FavoriteAction fa = 1;
}

message CreateWorkReq {
    oneof what {
        string actionId = 1;
        string timeBlockId = 2;
    }
    bool activate = 20;
}

message AddWorkReq {
    WorkSession work = 1;
}

message DeleteWorkReq {
    string workSessionId = 1;
}

message AddWorkEventReq {
    string workSessionId = 1;
    repeated WorkEvent events = 2;
}

message TimeSpan {
    int64 start = 1; // time_t
    int64 end = 2; // time_t
}

enum SortOrder {
    ASCENDING = 0; // Default
    DESCENDING = 1;
}

message GetWorkSessionsReq {
    enum SortCols {
        FROM_TIME = 0;
        CHANGE_TIME = 1;
    }

    Page page = 1;
    SortCols sortCols = 2;
    SortOrder sortOrder = 3;
    optional TimeSpan timeSpan = 4;

    oneof filter {
        string actionId = 10;
        string nodeId = 11;
    }
}

message OtpRequest {
}

message OtpResponse {
    string otp = 1;
    string email = 2;
}

message GetNewReq {
    int64 since = 3; // time_t. Use 0 to fetch all
}

message ListTenantsReq {
}

message ResetPlaybackReq {
    uint32 instanceId = 2; // starts at 1
}

message Hello {
    string sessionId = 1;
    string serverId = 2;
    uint64 serverInstanceTag = 3; // Used to detect server restarts
    uint32 lastPublishId = 4; // Last published message-id to the user
    uint64 lastNotification = 5; // Last notification update timestamp visible to the user
}

// Debug info about the user-sessions on the server
message UserSession {

    message Session {
        common.Uuid sessionId = 1;
        common.Uuid deviceId = 2;
        uint32 durationInSeconds = 4;
        uint32 lastSeenSecsAgo = 5;
        repeated uint32 lastReqIds = 6; // One for each instance of the devie
        string deviceName = 7;
    }

    message Publisher {
        common.Uuid uuid = 1;
        bool active = 2;
    }

    message Device {
        repeated int32 lastRequestId = 1;
    }

    common.Uuid userId = 1;
    string userEmail = 2;
    common.Uuid tenantId = 3;
    string tenantName = 4;
    uint32 publishMessageId = 5;
    User.Kind kind = 6;

    repeated Session sessions = 12;
    repeated Publisher publishers = 13;
    repeated Device devices = 14;
}

message UserSessions {
    repeated UserSession sessions = 1;
}

message Status {
    Error error = 1;
    string message = 2;
    optional string uuid = 3;
    optional bool hasMore = 4; // Hint while receiving paginated data that there is more data
    optional bool fromStart = 5; // Hint while receiving paginated data that the data is from the start

    // Set for some objects when they are created
    oneof what {
        Tenant tenant = 10;
        User user = 11;
        Node node = 12;
        Actions actions = 13;
        Action action = 14;
        string deletedActionId = 15;
        FavoriteActions favoriteActions = 16;
        WorkSession work = 17;
        WorkSessions workSessions = 18;
        WorkSummary workSummary = 19;
        DetailedWorkSummary detailedWorkSummary = 20;
        UserGlobalSettings userGlobalSettings = 21;
        CalendarEvents calendarEvents = 22;
        ActionCategory actionCategory = 23;
        ActionCategories actionCategories = 24;
        CreateDeviceResp createDeviceResp = 25;
        ServerInfo serverInfo = 26;
        OtpResponse otpResponse = 27;
        Hello hello = 28; // From Hello
        ListOfDays days = 29; // For day colors
        DayColorDefinitions dayColorDefinitions = 30;
        CompleteDay day = 31; // for day color
        Nodes nodes = 32;
        CompleteActions completeActions = 33;
        DataVersionsInfo dataVersions = 34;
        TimeBlocks timeBlocks = 35;
        Devices devices = 36;
        Device device = 37;
        UserSessions userSessions = 38;
        Notifications notifications = 39;
    }
}

service Nextapp {
    rpc Hello(Empty) returns (Status) {}
    rpc Ping(PingReq) returns (Status) {}
    rpc GetServerInfo(Empty) returns (Status) {}
    rpc GetNodes(GetNodesReq) returns (NodeTree) {}
    //rpc NodeChanged(NodeUpdate) returns (Status) {}
    rpc GetDayColorDefinitions(Empty) returns (DayColorDefinitions) {}
    rpc GetDay(Date) returns (Status) {}
    rpc GetMonth(MonthReq) returns (Month) {}
    rpc SetColorOnDay(SetColorReq) returns (Status) {}
    rpc SetDay(CompleteDay) returns (Status) {}
    rpc SubscribeToUpdates(UpdatesReq) returns (stream Update) {}
    rpc CreateTenant(CreateTenantReq) returns (Status) {}
    rpc ListTenants(ListTenantsReq) returns (stream Status) {} // admin only

    // If called by a super-user, user.uuid can point to any tenant. If unset, the logged-in tenant is used.
    rpc CreateUser(User) returns (Status) {}

    rpc CreateDevice(CreateDeviceReq) returns (Status) {}
    rpc GetOtpForNewDevice(OtpRequest) returns (Status) {}
    rpc GetDevices(Empty) returns (Status) {}
    rpc UpdateDevice(DeviceUpdateReq) returns (Status) {}
    rpc DeleteDevice(common.Uuid) returns (Status) {}

    rpc CreateNode(CreateNodeReq) returns (Status) {}
    rpc UpdateNode(Node) returns (Status) {}
    rpc DeleteNode(DeleteNodeReq) returns (Status) {}
    rpc MoveNode(MoveNodeReq) returns (Status) {}
    rpc GetActions(GetActionsReq) returns (Status) {}
    rpc GetAction(GetActionReq) returns (Status) {}
    rpc CreateAction(Action) returns (Status) {}
    rpc UpdateAction(Action) returns (Status) {}
    rpc UpdateActions(UpdateActionsReq) returns (Status) {}
    rpc MoveAction(MoveActionReq) returns (Status) {}
    rpc DeleteAction(DeleteActionReq) returns (Status) {}
    rpc MarkActionAsDone(ActionDoneReq) returns (Status) {}
    rpc MarkActionAsFavorite(ActionFavoriteReq) returns (Status) {}
    rpc ValidateDue(Due) returns (Status) {}
    rpc GetFavoriteActions(Empty) returns (Status) {}
    rpc CreateWorkSession(CreateWorkReq) returns (Status) {}
    rpc AddWork(AddWorkReq) returns (Status) {}
    rpc AddWorkEvent(AddWorkEventReq) returns (Status) {}
    rpc ListCurrentWorkSessions(Empty) returns (Status) {}
    rpc GetWorkSummary(WorkSummaryRequest) returns (Status) {}
    rpc GetDetailedWorkSummary(DetailedWorkSummaryRequest) returns (Status) {}
    rpc DeleteWorkSession(DeleteWorkReq) returns (Status) {}
    rpc GetWorkSessions(GetWorkSessionsReq) returns (Status) {}
    rpc GetUserGlobalSettings(Empty) returns (Status) {}
    rpc SetUserGlobalSettings(UserGlobalSettings) returns (Status) {}
    rpc CreateTimeblock(TimeBlock) returns (Status) {}
    rpc UpdateTimeblock(TimeBlock) returns (Status) {}
    rpc DeleteTimeblock(DeleteTimeblockReq) returns (Status) {}
    rpc GetCalendarEvents(TimeSpan) returns (Status) {}
    rpc CreateActionCategory(ActionCategory) returns (Status) {}
    rpc GetActionCategories(Empty) returns (Status) {}
    rpc UpdateActionCategory(ActionCategory) returns (Status) {}
    rpc DeleteActionCategory(DeleteActionCategoryReq) returns (Status) {}
    rpc GetDataVersions(Empty) returns (Status) {}

    rpc GetNewDays(GetNewReq) returns (stream Status) {}
    rpc GetNewDayColorDefinitions(GetNewReq) returns (Status) {}
    rpc GetNewNodes(GetNewReq) returns (stream Status) {}
    rpc GetNewActions(GetNewReq) returns (stream Status) {}
    rpc GetNewWork(GetNewReq) returns (stream Status) {}
    rpc GetNewNotifications(GetNewReq) returns (stream Status) {}
    rpc GetNewTimeBlocks(GetNewReq) returns (stream Status) {}
    rpc ResetPlayback(ResetPlaybackReq) returns (Status) {}
    rpc ListCurrentSessions(Empty) returns (Status) {}
    rpc SendNotification(Notification) returns (Status) {}
    rpc DeleteNotification(DeleteNotificationReq) returns (Status) {}
}
