syntax = "proto3";

package signup.pb;

import "common.proto";

enum Error {
  OK = 0;
  GENERIC_ERROR = 1;
  MISSING_CSR = 2;
  INVALID_CSR = 3;
  INVALID_EMAIL = 4;
  EMAIL_ALREADY_EXISTS = 5;
  MISSING_EMAIL = 6;
  UNAUTHORIZED = 7;
  CLIENT_GRPC_ERROR = 8;
}

message Region {
  enum State {
    ACTIVE = 0;
    INACTIVE = 1;
  }

  common.Uuid uuid = 3;
  string name = 1;
  string description = 2;
  State state = 4;
}

message Regions {
  repeated Region regions = 1;
}

enum InstanceState {
  ACTIVE = 0;
  INACTIVE = 1;
}

message SetInstance {
  common.Uuid uuid = 1;
  common.Uuid region = 2;
  string url = 3;
  string pub_url = 4;
  string x509_ca_cert = 5;
  string x509_cert = 6;
  string x509_key = 7;
  //common.Uuid server_id = 8;
  string metrics_url = 9;
  optional InstanceState state = 10;
}

message Instance {
  common.Uuid uuid = 1;
  common.Uuid region = 2;
  string regionName = 11;
  string url = 3;
  string pub_url = 4;
  common.Uuid server_id = 8;
  string metrics_url = 9;
  optional bool is_online = 10;
  InstanceState state = 5;
}

message Instances {
  repeated Instance instances = 1;
}

message GetInfoRequest {}

message GetInfoResponse {
  string eula = 1;
  string greeting = 2;
  repeated Region regions = 3;
}

message SignUpRequest {
  string email = 1;
  string userName = 2;
  string tenantName = 3;
  common.Device device = 4;
  optional common.Uuid region = 5;
}

message SignUpResponse {
    string uuid = 1; // Device uuid
    string cert = 4; // PEM encoded signed certificate
    string serverUrl = 5; // Nextapp gRPC URL
    string caCert = 6; // PEM encoded server CA certificate
}

// This comes from a device without any known identity
// for an existing user.
message CreateNewDeviceRequest {
    oneof auth {
        common.OtpAuth otpAuth = 1;
    }

    common.Device device = 3;
}

message Reply {
    string message = 1;
    Error error = 2;

    oneof payload {
        GetInfoResponse getInfoResponse = 10;
        SignUpResponse signUpResponse = 11;
        Regions regions = 12;
        common.Uuid uuid = 13; // For create operations to return the new uuid
        Instances instances = 14;
    }
}

service SignUp {
  rpc GetInfo(GetInfoRequest) returns (Reply) {}
  rpc SignUp(SignUpRequest) returns (Reply) {}
  rpc CreateNewDevice(CreateNewDeviceRequest) returns (Reply) {}

  // Admin API
  rpc CreateRegion(Region) returns (Reply) {}
  rpc UpdateRegion(Region) returns (Reply) {}
  rpc DeleteRegion(common.Uuid) returns (Reply) {}
  rpc ListRegions(common.Empty) returns (Reply) {}

  rpc AddInstance(SetInstance) returns (Reply) {}
  rpc RemoveInstance(common.Uuid) returns (Reply) {}
  rpc ListInstances(common.Empty) returns (Reply) {}
  rpc UpdateInstance(SetInstance) returns (Reply) {}

}
