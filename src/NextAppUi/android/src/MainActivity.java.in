package @PACKAGE_NAME@;

import android.Manifest;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import org.qtproject.qt.android.bindings.QtActivity;
import java.io.File;
import android.net.Uri;
import androidx.core.content.FileProvider;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.util.ArrayList;


public class MainActivity extends QtActivity {
    private static final String TAG = "@PACKAGE_NAME@-MainActivity";
    private static final String FILE_PROVIDER_AUTHORITY = "@PACKAGE_NAME@.qtprovider";
    private static MainActivity self = null;

    private native void nativeOnSharedNextapp(String absolutePath);

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        self = this;

        // try {
        //     Intent intent = new Intent(this, QtAndroidService.class);
        //     ComponentName cn = startService(intent);
        //     if (cn == null) {
        //         // startService returned null → service wasn’t found or couldn’t be started
        //         Log.e(TAG, "Failed to start QtAndroidService: returned null ComponentName");
        //     } else {
        //         Log.i(TAG, "QtAndroidService started: " + cn.flattenToShortString());
        //     }
        // } catch (SecurityException se) {
        //     // e.g. missing SERVICE permission
        //     Log.e(TAG, "SecurityException starting QtAndroidService", se);
        // } catch (IllegalArgumentException iae) {
        //     // e.g. you passed a bad Intent
        //     Log.e(TAG, "IllegalArgumentException starting QtAndroidService", iae);
        // } catch (Exception e) {
        //     // catch-all for any other unexpected errors
        //     Log.e(TAG, "Unexpected exception starting QtAndroidService", e);
        // }
    }

    @Override
    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        // update the “current” Intent so getIntent() returns this one in onResume()
        setIntent(intent);
    }

    @Override
    protected void onResume() {
        super.onResume();

        // grab whatever Intent launched or re-launched us
        Intent intent = getIntent();
        if (intent != null) {
            Log.i(TAG, "onResume called with intent: " + intent.toString());
            handleIncoming(intent);

            // clear it so if the user hits home/back and then returns,
            // we don’t re-process the same Intent over and over
            setIntent(null);
        } else {
            Log.w(TAG, "onResume called with null intent");
        }

    }

    // // share a file via the system share sheet
    // public void shareFile(String path, String mimeType) {
    //     File file = new File(path);
    //     Uri uri = FileProvider.getUriForFile(
    //         this,
    //         "@PACKAGE_NAME@.qtprovider",  // must match your manifest/provider
    //         file
    //     );

    //     Intent share = new Intent(Intent.ACTION_SEND);
    //     share.setType(mimeType);
    //     share.putExtra(Intent.EXTRA_STREAM, uri);
    //     share.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

    //     // wrap in a chooser so the user sees all file-managers, etc.
    //     startActivity(Intent.createChooser(share, "Share file"));
    // }

    // // view a file via the "Open with…" dialog
    // public void viewFile(String path, String mimeType) {
    //     File file = new File(path);
    //     Uri uri = FileProvider.getUriForFile(
    //         this,
    //         "@PACKAGE_NAME@.fileprovider",
    //         file
    //     );

    //     Intent view = new Intent(Intent.ACTION_VIEW);
    //     view.setDataAndType(uri, mimeType);
    //     view.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

    //     startActivity(Intent.createChooser(view, "Open file with"));
    // }

    // private void handleIncoming(Intent intent) {
    //     String action = intent.getAction();

    //     if (Intent.ACTION_SEND.equals(action)) {
    //         // single-file share
    //         Uri uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
    //         if (uri != null) {
    //             copyAndHandle(uri);
    //         }
    //     }
    //     else if (Intent.ACTION_SEND_MULTIPLE.equals(action)) {
    //         // multi-file share (even if it's really just one)
    //         ArrayList<Uri> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
    //         if (uris != null && !uris.isEmpty()) {
    //             // for now, just handle the first .nextapp file:
    //             copyAndHandle(uris.get(0));
    //             //—or loop through all:
    //             // for (Uri u : uris) copyAndHandle(u);
    //         }
    //     }
    // }
    private void handleIncoming(Intent intent) {
        String action = intent.getAction();

        if (action == null) {
            Log.w(TAG, "Received intent with null action, nothing to handle.");
            return;
        }
        Log.i(TAG, "Handling incoming intent with action: " + action.toString());

        Uri uri = null;

        if (Intent.ACTION_VIEW.equals(action)) {
            uri = intent.getData();
            Log.i(TAG, "Received ACTION_VIEW with URI: " + uri);
        }
        else if (Intent.ACTION_SEND.equals(action)) {
            uri = intent.getParcelableExtra(Intent.EXTRA_STREAM);
            Log.i(TAG, "Received ACTION_SEND with URI: " + uri);
        }
        else if (Intent.ACTION_SEND_MULTIPLE.equals(action)) {
            ArrayList<Uri> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
            if (uris != null && !uris.isEmpty()) {
                Log.i(TAG, "Received ACTION_SEND_MULTIPLE with " + uris.size() + " URIs");
                uri = uris.get(0);
            }
        }

        if (uri != null) {
            Log.i(TAG, "Processing URI: " + uri.toString());
            copyAndHandle(uri);
        } else {
            Log.w(TAG, "No valid URI found in intent, nothing to process.");
        }
    }

    private void copyAndHandle(Uri src) {
        File dst = new File(getFilesDir(), "shared.nextapp");
        boolean success = false;
        try (InputStream in = getContentResolver().openInputStream(src);
             FileOutputStream out = new FileOutputStream(dst)) {

            byte[] buf = new byte[4096];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            out.getFD().sync();
            success = true;
            Log.i(TAG, "Copied shared file to: " + dst.getAbsolutePath());
            nativeOnSharedNextapp(dst.getAbsolutePath());
        } catch (Exception e) {
            Log.e(TAG, "Error handling shared .nextapp", e);
        } finally {
            if (!success && dst.exists()) {
                if (dst.delete()) {
                    Log.i(TAG, "Deleted partial file: " + dst.getAbsolutePath());
                } else {
                    Log.w(TAG, "Failed to delete partial file: " + dst.getAbsolutePath());
                }
            }
        }
    }


    public static void shareFile(String absolutePath, String mimeType) {
        if (self == null) {
            Log.e(TAG, "shareFile: self is null");
            return;
        }
        try {
            Uri uri = FileProvider.getUriForFile(self, FILE_PROVIDER_AUTHORITY, new File(absolutePath));
            Intent share = new Intent(Intent.ACTION_SEND);
            share.setType(mimeType);
            share.putExtra(Intent.EXTRA_STREAM, uri);
            share.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            self.startActivity(Intent.createChooser(share, "Share file"));
        } catch (Exception e) {
            Log.e(TAG, "shareFile failed", e);
        }
    }

    /** Open a file with an external viewer ("Open with…"). */
    public static void viewFile(String absolutePath, String mimeType) {
        if (self == null) {
            Log.e(TAG, "viewFile: self is null");
            return;
        }
        try {
            Uri uri = FileProvider.getUriForFile(self, FILE_PROVIDER_AUTHORITY, new File(absolutePath));
            Intent view = new Intent(Intent.ACTION_VIEW);
            view.setDataAndType(uri, mimeType);
            view.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            self.startActivity(Intent.createChooser(view, "Open file with"));
        } catch (Exception e) {
            Log.e(TAG, "viewFile failed", e);
        }
    }

    /** Return the app-specific media dir: /storage/.../Android/media/@PACKAGE_NAME@ */
    public static String getAppMediaDir() {
        if (self == null) {
            Log.e(TAG, "getAppMediaDir: self is null");
            return "";
        }
        File[] dirs = self.getExternalMediaDirs();
        if (dirs != null) {
            for (File d : dirs) {
                if (d != null) {
                    if (!d.exists() && !d.mkdirs()) {
                        Log.w(TAG, "getAppMediaDir: mkdirs failed for " + d);
                    }
                    return d.getAbsolutePath();
                }
            }
        }
        Log.e(TAG, "getAppMediaDir: no externalMediaDirs available");
        return "";
    }

    /** Ensure a subdirectory under the media dir exists; returns its absolute path (or empty on failure). */
    public static String ensureMediaSubdir(String relative) {
        String base = getAppMediaDir();
        if (base.isEmpty()) return "";
        File f = new File(base, relative == null ? "" : relative);
        if (!f.exists() && !f.mkdirs()) {
            Log.e(TAG, "ensureMediaSubdir: mkdirs failed for " + f.getAbsolutePath());
            return "";
        }
        return f.getAbsolutePath();
    }

}
